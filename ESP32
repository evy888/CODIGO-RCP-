#include <Arduino.h>
#include <ArduinoJson.h>
#include <NimBLEDevice.h>
#include <Preferences.h>
#include <WiFi.h>
#include <SocketIoClient.h>
#include <math.h>
#include <VL53L0X.h>
#include <Wire.h>

VL53L0X sensor;

#define SAMPLE_FREQUENCY 50
#define NUM_SAMPLES 150
#define WIFI_RETRY_DELAY 2000
#define SAMPLE_PERIOD_MS 20

float samples[NUM_SAMPLES];
int sampleIndex = 0;
volatile float sharedDistance = 0;

Preferences preferences;
String ssid = "";
String password = "";
bool wifiCredentialsReceived = false;

NimBLEServer* pServer;
NimBLEService* pService;
NimBLECharacteristic* pCharacteristic;
SocketIoClient webSocket;

void event(const char* payload, size_t length) {
  Serial.print("Received message: ");
  Serial.println(payload);
}

class MyServerCallbacks : public NimBLEServerCallbacks {
  void onConnect(NimBLEServer* pServer) override {
    Serial.println("Client connected");
    NimBLEDevice::stopAdvertising();
  }

  void onDisconnect(NimBLEServer* pServer) override {
    Serial.println("Client disconnected");
    NimBLEDevice::startAdvertising();
  }
};

class MyCallbacks : public NimBLECharacteristicCallbacks {
  void onWrite(NimBLECharacteristic* pCharacteristic) override {
    std::string rxValue = pCharacteristic->getValue();
    if (rxValue.length() > 0) {
      Serial.println("Received Value: " + String(rxValue.c_str()));
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, rxValue);
      ssid = doc["ssid"].as<String>();
      password = doc["pass"].as<String>();

      preferences.begin("wifi-config", false);
      preferences.putString("ssid", ssid);
      preferences.putString("password", password);
      preferences.end();

      wifiCredentialsReceived = true;

      Serial.println("Received over BLE: " + ssid + " " + password);
      connectToWiFi();
    }
  }
};

void setup() {
  Serial.begin(115200);

  Wire.begin(22, 21);
  sensor.setTimeout(500);
  if (!sensor.init()) {
     Serial.println("Failed to detect and initialize sensor!");
     while (1);
  }
  sensor.setSignalRateLimit(0.1);

  sensor.setMeasurementTimingBudget(20000);

  Serial.println("Starting NimBLE Server");
  NimBLEDevice::init("CLAMPS-1234S");
  NimBLEDevice::setPower(ESP_PWR_LVL_P9);

  pServer = NimBLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  pService = pServer->createService("FDC7");
  pCharacteristic = pService->createCharacteristic("FD58", NIMBLE_PROPERTY::WRITE | NIMBLE_PROPERTY::READ | NIMBLE_PROPERTY::NOTIFY);
  pCharacteristic->setCallbacks(new MyCallbacks());
  pService->start();

  NimBLEAdvertising* pAdvertising = NimBLEDevice::getAdvertising();
  pAdvertising->addServiceUUID("FDC7");
  pAdvertising->start();

  tryAutoConnectWiFi();

  webSocket.begin("9.tcp.ngrok.io", 24768);
  webSocket.on("event", event);

  xTaskCreatePinnedToCore(bluetoothTask, "bluetoothTask", 10000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(wifiTask, "wifiTask", 10000, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(readSensorTask, "readSensorTask", 10000, NULL, 1, NULL, 0);
}

void loop() {
  // Mantener loop() vacío si estás usando tareas FreeRTOS
}

void tryAutoConnectWiFi() {
  preferences.begin("wifi-config", true);
  if (preferences.getString("ssid", "") != "") {
    ssid = preferences.getString("ssid");
    password = preferences.getString("password");
    preferences.end();
    connectToWiFi();
  } else {
    preferences.end();
  }
}

void bluetoothTask(void* parameter) {
  for (;;) {
    pCharacteristic->setValue(String(sharedDistance, 2));
    pCharacteristic->notify();
    vTaskDelay(5 / portTICK_PERIOD_MS);
  }
}

void connectToWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Attempting to connect to WiFi...");
    WiFi.begin(ssid.c_str(), password.c_str());
  }
}

void wifiTask(void* parameter) {
  unsigned long lastSendTime = 0;
  StaticJsonDocument<2048> doc;
  JsonArray array = doc.createNestedArray("array");

  for (;;) {
    if (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid.c_str(), password.c_str());
      if (WiFi.waitForConnectResult() != WL_CONNECTED) {
        Serial.println("Failed to connect to WiFi. Check credentials.");
        vTaskDelay(WIFI_RETRY_DELAY / portTICK_PERIOD_MS);
        continue;
      }
      Serial.println("Connected to WiFi.");
    }

    webSocket.loop();

    if (millis() - lastSendTime >= 3000) {
      lastSendTime = millis();
      array.clear();
      DynamicJsonDocument doc(2048);
      doc["id"] = "12345";
      JsonArray array = doc.createNestedArray("array");
      for (int i = 0; i < NUM_SAMPLES; i++) {
        array.add(samples[i]);
      }
      String jsonString;
      serializeJson(doc, jsonString);
      webSocket.emit("procesamiento", jsonString.c_str());
      Serial.println("Data sent: " + jsonString);
    }
    vTaskDelay(1);
  }
}

void readSensorTask(void* parameter) {
  for (;;) {
    sharedDistance = ((sensor.readRangeSingleMillimeters() / 10.0000) - 3.8);
    if (sampleIndex < NUM_SAMPLES) {
      samples[sampleIndex++] = sharedDistance;
    } else {
      sampleIndex = 0;
    }
    vTaskDelay(1 / portTICK_PERIOD_MS);
  }
}
